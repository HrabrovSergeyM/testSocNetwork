{"version":3,"sources":["components/Users/Paginator.module.css","components/Users/Users.module.css","components/Users/Paginator.tsx","components/Users/User.tsx","redux/usersSelectors.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"names":["module","exports","Paginator","totalUserCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","cn","classes","paginator","onClick","filter","p","map","selectedPage","pageNumber","key","e","User","user","followingInProgress","unfollow","follow","to","id","avatar","src","photos","small","defaultAvatar","followed","disabled","some","name","status","getUsers","createSelector","state","usersPage","users","u","getPageSize","getTotalUserCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","values","UsersSearchForm","React","memo","props","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","type","as","value","Users","dispatch","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","requestUsers","query","pathname","userId","UsersPage","pageTitle","Preloader"],"mappings":"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","file":"static/js/4.80995b0e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__z17Uk\",\"pageNumber\":\"Paginator_pageNumber__3TmUA\",\"selectedPage\":\"Paginator_selectedPage__1soWc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Users_avatar__13kVV\",\"selectedPage\":\"Users_selectedPage__1P1Gj\",\"preloader\":\"Users_preloader__24bDx\",\"spinner\":\"Users_spinner__1TYiE\",\"spin\":\"Users_spin__3VIwq\"};","import React, { useState } from \"react\";\nimport classes from \"./Paginator.module.css\";\nimport cn from \"classnames\";\n\ntype PropsType = {\n  totalUserCount: number;\n  pageSize: number;\n  currentPage: number;\n  onPageChanged: (pageNumber: number) => void;\n  portionSize?: number;\n};\n\nlet Paginator: React.FC<PropsType> = ({\n  totalUserCount,\n  pageSize,\n  currentPage,\n  onPageChanged,\n  portionSize = 10,\n}) => {\n  let pagesCount = Math.ceil(totalUserCount / pageSize);\n  let pages: Array<number> = [];\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  let portionCount = Math.ceil(pagesCount / portionSize);\n  let [portionNumber, setPortionNumber] = useState(1);\n\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n  let rightPortionPageNumber = portionNumber * portionSize;\n\n  return (\n    <div className={cn(classes.paginator)}>\n      {portionNumber > 1 && (\n        <button\n          onClick={() => {\n            setPortionNumber(portionNumber - 1);\n          }}\n        >\n          PREV\n        </button>\n      )}\n\n      {pages\n        .filter(\n          (p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber\n        )\n        .map((p) => {\n          return (\n            <span\n              className={cn(\n                {\n                  [classes.selectedPage]: currentPage === p,\n                },\n                classes.pageNumber\n              )}\n              key={p}\n              onClick={(e) => {\n                onPageChanged(p);\n              }}\n            >\n              {p}\n            </span>\n          );\n        })}\n      {portionCount > portionNumber && (\n        <button\n          onClick={() => {\n            setPortionNumber(portionNumber + 1);\n          }}\n        >\n          NEXT\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Paginator;\n","import React from \"react\";\nimport classes from \"./Users.module.css\";\nimport defaultAvatar from \"../../asssets/images/man-avatar-profile-round-icon_24640-14046.jpg\";\nimport { NavLink } from \"react-router-dom\";\nimport { UserType } from \"../../types/types\";\n\ntype PropsType = {\n  user: UserType;\n  followingInProgress: Array<number>;\n  unfollow: (userId: number) => void;\n  follow: (userId: number) => void;\n};\n\nlet User: React.FC<PropsType> = ({\n  user,\n  followingInProgress,\n  unfollow,\n  follow,\n}) => {\n  return (\n    <div>\n      <span>\n        <div>\n          <NavLink to={\"/profile/\" + user.id}>\n            <img\n              className={classes.avatar}\n              src={\n                user.photos.small != null ? user.photos.small : defaultAvatar\n              }\n            />\n          </NavLink>\n        </div>\n        <div>\n          {user.followed ? (\n            <button\n              disabled={followingInProgress.some((id) => id === user.id)}\n              onClick={() => {\n                unfollow(user.id);\n              }}\n            >\n              Unfollow\n            </button>\n          ) : (\n            <button\n              disabled={followingInProgress.some((id) => id === user.id)}\n              onClick={() => {\n                follow(user.id);\n              }}\n            >\n              Follow\n            </button>\n          )}\n        </div>\n      </span>\n      <span>\n        <span>\n          <div>{user.name}</div>\n          <div>{user.status}</div>\n        </span>\n        <span>\n          <div>{\"user.location.country\"}</div>\n          <div>{\"user.location.city\"}</div>\n        </span>\n      </span>\n    </div>\n  );\n};\n\nexport default User;\n","import { createSelector } from \"reselect\";\nimport { AppStateType } from \"./reduxStore\";\n\nconst getUsersSelector = (state: AppStateType) => {\n  return state.usersPage.users;\n};\n\nexport const getUsers = createSelector(getUsersSelector, (users) => {\n  return users.filter((u) => true);\n});\n\nexport const getPageSize = (state: AppStateType) => {\n  return state.usersPage.pageSize;\n};\n\nexport const getTotalUserCount = (state: AppStateType) => {\n  return state.usersPage.totalUserCount;\n};\n\nexport const getCurrentPage = (state: AppStateType) => {\n  return state.usersPage.currentPage;\n};\n\nexport const getIsFetching = (state: AppStateType) => {\n  return state.usersPage.isFetching;\n};\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n  return state.usersPage.followingInProgress;\n};\nexport const getUsersFilter = (state: AppStateType) => {\n  return state.usersPage.filter;\n};\n","import { Field, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { FilterType } from \"../../redux/usersReducer\";\r\nimport { getUsersFilter } from \"../../redux/usersSelectors\";\r\n\r\ntype PropsType = {\r\n  onFilterChanged: (filter: FilterType) => void;\r\n};\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\ntype FormType = {\r\n  term: string;\r\n  friend: FriendFormType;\r\n};\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n  const errors = {};\r\n  return errors;\r\n};\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n  const filter = useSelector(getUsersFilter);\r\n\r\n  const submit = (\r\n    values: FormType,\r\n    { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\r\n  ) => {\r\n    const filter: FilterType = {\r\n      term: values.term,\r\n      friend:\r\n        values.friend === \"null\"\r\n          ? null\r\n          : values.friend === \"true\"\r\n          ? true\r\n          : false,\r\n    };\r\n    props.onFilterChanged(filter);\r\n    setSubmitting(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={{\r\n          term: filter.term,\r\n          friend: String(filter.friend) as FriendFormType,\r\n        }}\r\n        validate={usersSearchFormValidate}\r\n        onSubmit={submit}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <Field type=\"text\" name=\"term\" />\r\n            <Field name=\"friend\" as=\"select\">\r\n              <option value=\"null\">All</option>\r\n              <option value=\"true\">Only Followed</option>\r\n              <option value=\"false\">Only Unfollowed</option>\r\n            </Field>\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Find\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\nimport classes from \"./Users.module.css\";\nimport Paginator from \"./Paginator\";\nimport User from \"./User\";\nimport { UsersSearchForm } from \"./UsersSearchForm\";\nimport { FilterType, requestUsers } from \"../../redux/usersReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getCurrentPage,\n  getFollowingInProgress,\n  getPageSize,\n  getTotalUserCount,\n  getUsers,\n  getUsersFilter,\n} from \"../../redux/usersSelectors\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport * as queryString from \"querystring\";\n\ntype PropsType = {};\ntype QueryParamsType = {\n  term?: string;\n  page?: string;\n  friend?: string;\n};\n\nexport const Users: React.FC<PropsType> = (props) => {\n  const users = useSelector(getUsers);\n  const totalUserCount = useSelector(getTotalUserCount);\n  const currentPage = useSelector(getCurrentPage);\n  const pageSize = useSelector(getPageSize);\n  const filter = useSelector(getUsersFilter);\n  const followingInProgress = useSelector(getFollowingInProgress);\n\n  const dispatch = useDispatch();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const parsed = queryString.parse(\n      history.location.search.substr(1)\n    ) as QueryParamsType;\n\n    let actualPage = currentPage;\n    let actualFilter = filter;\n\n    if (!!parsed.page) actualPage = Number(parsed.page);\n\n    if (!!parsed.term)\n      actualFilter = { ...actualFilter, term: parsed.term as string };\n\n    switch (parsed.friend) {\n      case \"null\":\n        actualFilter = { ...actualFilter, friend: null };\n        break;\n      case \"true\":\n        actualFilter = { ...actualFilter, friend: true };\n        break;\n      case \"false\":\n        actualFilter = { ...actualFilter, friend: false };\n        break;\n    }\n\n    dispatch(requestUsers(actualPage, pageSize, actualFilter));\n  }, []);\n\n  useEffect(() => {\n    const query: QueryParamsType = {};\n\n    if (!!filter.term) query.term = filter.term;\n    if (filter.friend !== null) query.friend = String(filter.friend);\n    if (currentPage !== 1) query.page = String(currentPage);\n\n    history.push({\n      pathname: \"/users\",\n      search: queryString.stringify(query),\n    });\n  }, [filter, currentPage]);\n\n  const follow = (userId: number) => {\n    dispatch(follow(userId));\n  };\n  const unfollow = (userId: number) => {\n    dispatch(unfollow(userId));\n  };\n\n  const onPageChanged = (pageNumber: number) => {\n    dispatch(requestUsers(pageNumber, pageSize, filter));\n  };\n  const onFilterChanged = (filter: FilterType) => {\n    dispatch(requestUsers(1, pageSize, filter));\n  };\n\n  let pagesCount = Math.ceil(totalUserCount / pageSize);\n  let pages = [];\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  return (\n    <div>\n      <UsersSearchForm onFilterChanged={onFilterChanged} />\n      <Paginator\n        currentPage={currentPage}\n        onPageChanged={onPageChanged}\n        totalUserCount={totalUserCount}\n        pageSize={pageSize}\n      />\n      <div>\n        {users.map((user) => (\n          <User\n            user={user}\n            followingInProgress={followingInProgress}\n            follow={follow}\n            unfollow={unfollow}\n            key={user.id}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Users } from \"./Users\";\nimport { useSelector } from \"react-redux\";\nimport Preloader from \"../common/preloader/Preloader\";\nimport { getIsFetching } from \"../../redux/usersSelectors\";\n\ntype OwnPropsType = {\n  pageTitle: string;\n};\n\ntype UsersPagePropsType = {\n  pageTitle: string;\n};\n\nconst UsersPage: React.FC<UsersPagePropsType> = (props) => {\n  const isFetching = useSelector(getIsFetching);\n\n  return (\n    <>\n      <h2>{props.pageTitle}</h2>\n      {isFetching ? <Preloader /> : null}\n      <Users />\n    </>\n  );\n};\n\nexport default UsersPage;\n"],"sourceRoot":""}