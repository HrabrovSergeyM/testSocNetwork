{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","classes","dialog","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","state","dialogsPage","dialogsElements","dialogsData","map","d","key","messagesElements","messagesData","m","dialogs","dialogsItems","messages","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","messagesPage","actions","WrappedComponent","restProps"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCkBhMC,EAVyB,SAACC,GACvC,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACE,yBAAKC,UAAWC,IAAQC,QACtB,kBAAC,IAAD,CAASC,GAAIL,GAAOD,EAAMO,QCHjBC,EAJsB,SAACR,GACpC,OAAO,yBAAKG,UAAWC,IAAQC,QAASL,EAAMS,U,yBCI1CC,EAAcC,YAAiB,IA4BtBC,cAAoC,CACjDC,KAAM,2BADOD,EAlBX,SAACZ,GACH,OACE,0BAAMc,SAAUd,EAAMe,cACpB,6BACGC,YACC,qBACA,iBACA,CAACC,IAAUP,GACXQ,MAGJ,6BACE,6CCOOC,EAzBsB,SAACnB,GACpC,IAAIoB,EAAQpB,EAAMqB,YAEdC,EAAkBF,EAAMG,YAAYC,KAAI,SAACC,GAAD,OAC1C,kBAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAMmB,IAAKD,EAAEvB,GAAIA,GAAIuB,EAAEvB,QAEzCyB,EAAmBP,EAAMQ,aAAaJ,KAAI,SAACK,GAAD,OAC5C,kBAAC,EAAD,CAASpB,QAASoB,EAAEpB,QAASiB,IAAKG,EAAE3B,QAOtC,OACE,yBAAKC,UAAWC,IAAQ0B,SACtB,yBAAK3B,UAAWC,IAAQ2B,cAAeT,GACvC,yBAAKnB,UAAWC,IAAQ4B,UACtB,6BAAML,IAER,kBAAC,EAAD,CAAgBb,SAVA,SAACmB,GACnBjC,EAAMkC,YAAYD,EAAOE,qB,yBCtBzBC,EAA6B,SAAChB,GAAD,MAC9B,CACCiB,OAAQjB,EAAMkB,KAAKD,S,YCSRE,sBACbC,aAPoB,SAACpB,GACrB,MAAO,CACLC,YAAaD,EAAMqB,gBAKI,CAAEP,YAAaQ,IAAQR,eDF3C,SACLS,GAsBA,OAVqCH,YAMnCJ,EACA,GAPmCI,EAViC,SACpExC,GACI,IACEqC,EAAyBrC,EAAzBqC,OAAWO,EADd,YAC4B5C,EAD5B,YAGH,OAAKqC,EAEE,kBAACM,EAAsBC,GAFV,kBAAC,IAAD,CAAUtC,GAAG,gBCPtBiC,CAGbpB","file":"static/js/5.fe752562.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Dialogs_root__OFJ0R\",\"dialogs\":\"Dialogs_dialogs__2nODd\",\"dialogsItems\":\"Dialogs_dialogsItems__3hutU\",\"dialog\":\"Dialogs_dialog__T2R96\",\"messages\":\"Dialogs_messages__1HHMa\",\"message\":\"Dialogs_message__3ctpe\"};","import React from \"react\";\nimport classes from \"./../Dialogs.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\ntype PropsType = {\n  id: number;\n  name: string;\n};\n\nconst DialogItem: React.FC<PropsType> = (props) => {\n  let path = \"/dialogs/\" + props.id;\n\n  return (\n    <div className={classes.dialog}>\n      <NavLink to={path}>{props.name}</NavLink>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import React from \"react\";\nimport classes from \"./../Dialogs.module.css\";\n\ntype PropsType = {\n  message: string;\n};\n\nconst Message: React.FC<PropsType> = (props) => {\n  return <div className={classes.dialog}>{props.message}</div>;\n};\n\nexport default Message;\n","import React from \"react\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n  createField,\r\n  Textarea,\r\n} from \"../../common/FormsControls/FormsControls\";\r\nimport {\r\n  maxLengthCreator,\r\n  required,\r\n} from \"../../../utils/validators/validators\";\r\nimport { NewMessageFormValuesType } from \"../Dialogs\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = Extract<\r\n  keyof NewMessageFormValuesType,\r\n  string\r\n>;\r\ntype PropsType = {};\r\n\r\nconst AddMessageForm: React.FC<\r\n  InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType\r\n> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        {createField<NewMessageFormValuesKeysType>(\r\n          \"Enter your message\",\r\n          \"newMessageBody\",\r\n          [required, maxLength50],\r\n          Textarea\r\n        )}\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({\r\n  form: \"dialog-add-message-form\",\r\n})(AddMessageForm);\r\n","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\nimport { InitialStateType } from \"../../redux/dialogsReducer\";\r\n\r\ntype PropsType = {\r\n  dialogsPage: InitialStateType;\r\n  sendMessage: (messageText: string) => void;\r\n};\r\n\r\nexport type NewMessageFormValuesType = {\r\n  newMessageBody: string;\r\n};\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogsData.map((d) => (\r\n    <DialogItem name={d.name} key={d.id} id={d.id} />\r\n  ));\r\n  let messagesElements = state.messagesData.map((m) => (\r\n    <Message message={m.message} key={m.id} />\r\n  ));\r\n\r\n  let addNewMessage = (values: NewMessageFormValuesType) => {\r\n    props.sendMessage(values.newMessageBody);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.dialogs}>\r\n      <div className={classes.dialogsItems}>{dialogsElements}</div>\r\n      <div className={classes.messages}>\r\n        <div>{messagesElements}</div>\r\n      </div>\r\n      <AddMessageForm onSubmit={addNewMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../redux/reduxStore\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) =>\r\n  ({\r\n    isAuth: state.auth.isAuth,\r\n  } as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n  isAuth: boolean;\r\n};\r\ntype DispatchPropsType = {};\r\n\r\nexport function withAuthRedirect<WCP>(\r\n  WrappedComponent: React.ComponentType<WCP>\r\n) {\r\n  const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (\r\n    props\r\n  ) => {\r\n    let { isAuth, ...restProps } = props;\r\n\r\n    if (!isAuth) return <Redirect to=\"/login\" />;\r\n\r\n    return <WrappedComponent {...(restProps as WCP)} />;\r\n  };\r\n\r\n  let ConnectedAuthRedirectComponent = connect<\r\n    MapPropsType,\r\n    DispatchPropsType,\r\n    WCP,\r\n    AppStateType\r\n  >(\r\n    mapStateToPropsForRedirect,\r\n    {}\r\n  )(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n}\r\n","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport { actions } from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"../../redux/reduxStore\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    dialogsPage: state.messagesPage,\r\n  };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, { sendMessage: actions.sendMessage }),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}