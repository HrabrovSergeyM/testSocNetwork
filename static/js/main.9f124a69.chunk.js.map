{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","asssets/images/man-avatar-profile-round-icon_24640-14046.jpg","components/common/FormsControls/FormsControls.tsx","redux/dialogsReducer.ts","api/usersApi.ts","utils/object.helpers.js","redux/usersReducer.ts","api/chatApi.ts","redux/chatReducer.ts","asssets/images/preloader.svg","components/common/preloader/Preloader.module.css","components/Profile/MyPosts/Post/Post.module.css","api/api.ts","serviceWorker.js","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","api/profileApi.ts","redux/profileReducer.ts","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","api/authApi.ts","api/securityApi.ts","redux/authReducer.ts","components/Login/LoginPage.tsx","redux/appReducer.ts","redux/reduxStore.ts","hoc/withSuspense.tsx","redux/authSelectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","utils/validators/validators.ts","components/common/preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.css"],"names":["module","exports","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","initialState","dialogsData","id","messagesData","message","actions","sendMessage","newMessage","type","dialogsReducer","state","action","usersAPI","currentPage","pageSize","term","friend","instance","get","then","res","data","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUserCount","isFetching","followingInProgress","filter","payload","requestUsers","page","dispatch","getState","a","totalCount","usersReducer","userId","followed","subscribers","messagesReceived","statusChanged","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","cleanUp","removeEventListener","status","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","messages","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","m","v1","index","array","length","ResultCodesEnum","axios","create","withCredentials","baseURL","headers","Boolean","window","location","hostname","match","ProfileStatusWithHooks","useState","editMode","setEditMode","setStatus","useEffect","onDoubleClick","onChange","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","onSubmit","classes","formSummaryError","Object","keys","contacts","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","target","files","initialValues","formData","profileAPI","put","photoFile","FormData","append","posts","likesCount","newPostText","addPostActionCreator","setUserProfile","savePhotoSuccess","deletePost","postId","getUserProfile","profileReducer","newPost","p","Post","item","required","MyPostsMemorized","React","memo","postsElements","reverse","postsBlock","values","addPost","MyPostsContainer","connect","profilePage","MyPosts","Profile","ProfileContainer","this","params","authorizedUserId","history","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","resultCode","file","Error","stopSubmit","_error","Promise","reject","withRouter","News","Music","Settings","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","LoginReduxForm","undefined","style","LoginPage","useSelector","useDispatch","to","Captcha","initialized","appReducer","rootReducer","combineReducers","messagesPage","usersPage","app","formReducer","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","WrappedComponent","Suspense","fallback","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","alt","backgroundColor","icon","UserOutlined","DialogsContainer","lazy","UsersPage","ChatPage","SuspendedDialogs","SuspendedProfile","SuspendedChatPage","App","catchAllUnhandledError","alert","initializeApp","SubMenu","Menu","Content","Footer","Sider","padding","margin","width","defaultOpenKeys","height","title","LaptopOutlined","NotificationOutlined","minHeight","exact","path","render","pageTitle","textAlign","AppContainer","MainApp","hashType","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","maxLengthCreator","maxLength","preloader"],"mappings":"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","file":"static/js/main.9f124a69.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MyPosts_content__1-0_r\",\"postsBlock\":\"MyPosts_postsBlock__1ZW5d\",\"posts\":\"MyPosts_posts__u18aS\"};","module.exports = __webpack_public_path__ + \"static/media/man-avatar-profile-round-icon_24640-14046.68a5aa10.jpg\";","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport { FieldValidatorType } from \"../../../utils/validators/validators\";\r\nimport { Field, WrappedFieldProps } from \"redux-form\";\r\nimport { WrappedFieldMetaProps } from \"redux-form/lib/Field\";\r\n\r\ntype FormControlPropsType = {\r\n  meta: WrappedFieldMetaProps;\r\n};\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({\r\n  meta: { touched, error },\r\n  children,\r\n}) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n  //const {input, meta, child, ...restProps} = props;\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n  //const {input, meta, child, ...restProps} = props;\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport function createField<FormKeysType extends string>(\r\n  placeholder: string | undefined,\r\n  name: FormKeysType,\r\n  validators: Array<FieldValidatorType>,\r\n  component: React.FC<WrappedFieldProps>,\r\n  props = {},\r\n  text = \"\"\r\n) {\r\n  return (\r\n    <div>\r\n      <Field\r\n        placeholder={placeholder}\r\n        name={name}\r\n        validate={validators}\r\n        component={component}\r\n        {...props}\r\n      />{\" \"}\r\n      {text}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;\r\n","import { InferActionsTypes } from \"./reduxStore\";\r\n\r\ntype DialogsDataType = {\r\n  id: number;\r\n  name: string;\r\n};\r\ntype MessagesDataType = {\r\n  id: number;\r\n  message: string;\r\n};\r\n\r\nlet initialState = {\r\n  dialogsData: [\r\n    {\r\n      id: 1,\r\n      name: \"Serg\",\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Ars\",\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Andrew\",\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Leo\",\r\n    },\r\n  ] as Array<DialogsDataType>,\r\n  messagesData: [\r\n    {\r\n      id: 1,\r\n      message: \"Hi\",\r\n    },\r\n    {\r\n      id: 2,\r\n      message: \"How r u?\",\r\n    },\r\n    {\r\n      id: 3,\r\n      message: \"Yo\",\r\n    },\r\n  ] as Array<MessagesDataType>,\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n  sendMessage: (newMessage: string) => {\r\n    return { type: \"SN/DIALOGS/SEND_MESSAGE\", newMessage } as const;\r\n  },\r\n};\r\n\r\nconst dialogsReducer = (\r\n  state = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"SN/DIALOGS/SEND_MESSAGE\": {\r\n      let newMessage = action.newMessage;\r\n      return {\r\n        ...state,\r\n\r\n        messagesData: [...state.messagesData, { id: 5, message: newMessage }],\r\n      };\r\n    }\r\n\r\n    // case UPDATE_NEW_MESSAGE_TEXT: {\r\n    //   return {\r\n    //     ...state,\r\n    //     newMessageText: action.newText,\r\n    //   };\r\n    // }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// export const updateNewMessageTextActionCreator = (text) => {\r\n//   return { type: UPDATE_NEW_MESSAGE_TEXT, newText: text };\r\n// };\r\n\r\nexport default dialogsReducer;\r\n","import { GetItemsType, instance, APIResponseType } from \"./api\";\r\n\r\nexport const usersAPI = {\r\n  getUsers(\r\n    currentPage = 1,\r\n    pageSize = 10,\r\n    term: string = \"\",\r\n    friend: null | boolean = null\r\n  ) {\r\n    return instance\r\n      .get<GetItemsType>(\r\n        `users?page=${currentPage}&count=${pageSize}&term=${term}` +\r\n          (friend === null ? \"\" : `&friend=${friend}`)\r\n      )\r\n      .then((res) => res.data);\r\n  },\r\n  follow(userId: number) {\r\n    return instance\r\n      .post<APIResponseType>(`follow/${userId}`)\r\n      .then((res) => res.data);\r\n  },\r\n  unfollow(userId: number) {\r\n    return instance\r\n      .delete(`follow/${userId}`)\r\n      .then((res) => res.data) as Promise<APIResponseType>;\r\n  },\r\n};\r\n","export const updateObjectInArray = (\r\n  items,\r\n  itemId,\r\n  objPropName,\r\n  newObjProps\r\n) => {\r\n  return items.map((u) => {\r\n    if (u[objPropName] === itemId) {\r\n      return { ...u, ...newObjProps };\r\n    }\r\n    return u;\r\n  });\r\n};\r\n","import { InferActionsTypes, BaseThunkType } from \"./reduxStore\";\r\nimport { UserType } from \"./../types/types\";\r\n\r\nimport { usersAPI } from \"../api/usersApi\";\r\nimport { updateObjectInArray } from \"../utils/object.helpers\";\r\n\r\nlet initialState = {\r\n  users: [] as Array<UserType>,\r\n  pageSize: 10,\r\n  totalUserCount: 0,\r\n  currentPage: 1,\r\n  isFetching: false,\r\n  followingInProgress: [] as Array<number>, //array of users ids\r\n  filter: {\r\n    term: \"\",\r\n    friend: null as null | boolean,\r\n  },\r\n};\r\n\r\nexport type InitialState = typeof initialState;\r\nexport type FilterType = typeof initialState.filter;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\n\r\nconst usersReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): InitialState => {\r\n  switch (action.type) {\r\n    case \"SN/USERS/FOLLOW\":\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\r\n          followed: true,\r\n        }),\r\n      };\r\n    case \"SN/USERS/UNFOLLOW\":\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\r\n          followed: false,\r\n        }),\r\n      };\r\n\r\n    case \"SN/USERS/SET_USERS\":\r\n      return {\r\n        ...state,\r\n        users: action.users,\r\n      };\r\n\r\n    case \"SN/USERS/SET_CURRENT_PAGE\":\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    case \"SN/USERS/SET_TOTAL_USER_COUNT\":\r\n      return {\r\n        ...state,\r\n        totalUserCount: action.totalUserCount,\r\n      };\r\n    case \"SN/USERS/TOGGLE_IS_FETCHING\":\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      };\r\n    case \"SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter((id) => id !== action.userId),\r\n      };\r\n    case \"SN/USERS/SET_FILTER\":\r\n      return {\r\n        ...state,\r\n        filter: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  followSuccess: (userId: number) => {\r\n    return {\r\n      type: \"SN/USERS/FOLLOW\",\r\n      userId,\r\n    } as const;\r\n  },\r\n\r\n  unfollowSuccess: (userId: number) => {\r\n    return {\r\n      type: \"SN/USERS/UNFOLLOW\",\r\n      userId,\r\n    } as const;\r\n  },\r\n\r\n  setUsers: (users: Array<UserType>) => {\r\n    return {\r\n      type: \"SN/USERS/SET_USERS\",\r\n      users,\r\n    } as const;\r\n  },\r\n\r\n  setCurrentPage: (currentPage: number) => {\r\n    return {\r\n      type: \"SN/USERS/SET_CURRENT_PAGE\",\r\n      currentPage,\r\n    } as const;\r\n  },\r\n\r\n  setTotalUserCount: (totalUserCount: number) => {\r\n    return {\r\n      type: \"SN/USERS/SET_TOTAL_USER_COUNT\",\r\n      totalUserCount,\r\n    } as const;\r\n  },\r\n\r\n  setToggleIsFetching: (isFetching: boolean) => {\r\n    return {\r\n      type: \"SN/USERS/TOGGLE_IS_FETCHING\",\r\n      isFetching,\r\n    } as const;\r\n  },\r\n\r\n  setFollowingProgress: (isFetching: boolean, userId: number) => {\r\n    return {\r\n      type: \"SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS\",\r\n      isFetching,\r\n      userId,\r\n    } as const;\r\n  },\r\n  setFilter: (filter: FilterType) => {\r\n    return {\r\n      type: \"SN/USERS/SET_FILTER\",\r\n      payload: filter,\r\n    } as const;\r\n  },\r\n};\r\n\r\n//thunk\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(actions.setFollowingProgress(true, userId));\r\n    let data = await usersAPI.follow(userId);\r\n    if (data.resultCode == 0) {\r\n      dispatch(actions.followSuccess(userId));\r\n    }\r\n    dispatch(actions.setFollowingProgress(false, userId));\r\n  };\r\n};\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(actions.setFollowingProgress(true, userId));\r\n    let data = await usersAPI.unfollow(userId);\r\n    if (data.resultCode === 0) {\r\n      dispatch(actions.unfollowSuccess(userId));\r\n    }\r\n    dispatch(actions.setFollowingProgress(false, userId));\r\n  };\r\n};\r\n\r\nexport const requestUsers = (\r\n  page: number,\r\n  pageSize: number,\r\n  filter: FilterType\r\n): ThunkType => {\r\n  return async (dispatch, getState) => {\r\n    dispatch(actions.setToggleIsFetching(true));\r\n    dispatch(actions.setCurrentPage(page));\r\n    dispatch(actions.setFilter(filter));\r\n\r\n    let data = await usersAPI.getUsers(\r\n      page,\r\n      pageSize,\r\n      filter.term,\r\n      filter.friend\r\n    );\r\n    dispatch(actions.setToggleIsFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n    dispatch(actions.setTotalUserCount(data.totalCount));\r\n  };\r\n};\r\n\r\nexport default usersReducer;\r\n","export type ChatMessageAPIType = {\r\n  message: string;\r\n  photo: string;\r\n  userId: number;\r\n  userName: string;\r\n};\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void;\r\ntype StatusChangedSubscriberType = (status: StatusType) => void;\r\ntype EventsNamesType = \"messagesReceived\" | \"statusChanged\";\r\nexport type StatusType = \"pending\" | \"ready\" | \"error\";\r\n\r\nconst subscribers = {\r\n  messagesReceived: [] as MessagesReceivedSubscriberType[],\r\n  statusChanged: [] as StatusChangedSubscriberType[],\r\n};\r\n\r\nlet ws: WebSocket | null = null;\r\n\r\nconst closeHandler = () => {\r\n  notifySubscribersAboutStatus(\"pending\");\r\n  setTimeout(createChannel, 3000);\r\n};\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n  const newMessages = JSON.parse(e.data);\r\n  subscribers[\"messagesReceived\"].forEach((s) => s(newMessages));\r\n};\r\nconst openHandler = () => {\r\n  notifySubscribersAboutStatus(\"ready\");\r\n};\r\nconst errorHandler = () => {\r\n  notifySubscribersAboutStatus(\"error\");\r\n};\r\n\r\nconst cleanUp = () => {\r\n  ws?.removeEventListener(\"close\", closeHandler);\r\n  ws?.removeEventListener(\"message\", messageHandler);\r\n  ws?.removeEventListener(\"open\", openHandler);\r\n  ws?.removeEventListener(\"error\", errorHandler);\r\n};\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n  subscribers[\"statusChanged\"].forEach((s) => s(status));\r\n};\r\n\r\nfunction createChannel() {\r\n  cleanUp();\r\n  ws?.close();\r\n\r\n  ws = new WebSocket(\r\n    `wss://social-network.samuraijs.com/handlers/ChatHandler.ashx`\r\n  );\r\n  notifySubscribersAboutStatus(\"pending\");\r\n  ws.addEventListener(\"close\", closeHandler);\r\n  ws.addEventListener(\"message\", messageHandler);\r\n  ws.addEventListener(\"open\", openHandler);\r\n  ws.addEventListener(\"error\", errorHandler);\r\n}\r\n\r\nexport const chatAPI = {\r\n  start() {\r\n    createChannel();\r\n  },\r\n  stop() {\r\n    subscribers[\"messagesReceived\"] = [];\r\n    subscribers[\"statusChanged\"] = [];\r\n    cleanUp();\r\n    ws?.close();\r\n  },\r\n  subscribe(\r\n    eventName: EventsNamesType,\r\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType\r\n  ) {\r\n    //@ts-ignore\r\n    subscribers[eventName].push(callback);\r\n    return () => {\r\n      //@ts-ignore\r\n      subscribers[eventName] = subscribers[eventName].filter(\r\n        //@ts-ignore\r\n        (s) => s !== callback\r\n      );\r\n    };\r\n  },\r\n  unsubscribe(\r\n    eventName: EventsNamesType,\r\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType\r\n  ) {\r\n    //@ts-ignore\r\n    subscribers[eventName] = subscribers[eventName].filter(\r\n      //@ts-ignore\r\n      (s) => s !== callback\r\n    );\r\n  },\r\n  sendMessage(message: string) {\r\n    ws?.send(message);\r\n  },\r\n};\r\n","import { FormAction } from \"redux-form\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./reduxStore\";\r\nimport { chatAPI, ChatMessageAPIType, StatusType } from \"./../api/chatApi\";\r\nimport { Dispatch } from \"redux\";\r\nimport { v1 } from \"uuid\";\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;\r\ntype ChatMessageType = ChatMessageAPIType & { id: string };\r\n\r\nlet initialState = {\r\n  messages: [] as ChatMessageType[],\r\n  status: \"pending\" as StatusType,\r\n};\r\n\r\nconst chatReducer = (\r\n  state = initialState,\r\n  actions: ActionsType\r\n): InitialStateType => {\r\n  switch (actions.type) {\r\n    case `SN/CHAT/MESSAGES_RECEIVED`:\r\n      return {\r\n        ...state,\r\n        messages: [\r\n          ...state.messages,\r\n          ...actions.payload.messages.map((m) => ({ ...m, id: v1() })),\r\n        ].filter((m, index, array) => index >= array.length - 100),\r\n      };\r\n    case `SN/CHAT/STATUS_CHANGED`:\r\n      return {\r\n        ...state,\r\n        status: actions.payload.status,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  messagesReceived: (messages: ChatMessageType[]) => {\r\n    return {\r\n      type: \"SN/CHAT/MESSAGES_RECEIVED\",\r\n      payload: { messages },\r\n    } as const;\r\n  },\r\n  statusChanged: (status: StatusType) => {\r\n    return {\r\n      type: `SN/CHAT/STATUS_CHANGED`,\r\n      payload: { status },\r\n    } as const;\r\n  },\r\n};\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null =\r\n  null;\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n  if (_newMessageHandler === null) {\r\n    _newMessageHandler = (messages) => {\r\n      //@ts-ignore\r\n      dispatch(actions.messagesReceived(messages));\r\n    };\r\n  }\r\n  return _newMessageHandler;\r\n};\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null;\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n  if (_statusChangedHandler === null) {\r\n    _statusChangedHandler = (status) => {\r\n      dispatch(actions.statusChanged(status));\r\n    };\r\n  }\r\n  return _statusChangedHandler;\r\n};\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n  chatAPI.start();\r\n  chatAPI.subscribe(\"messagesReceived\", newMessageHandlerCreator(dispatch));\r\n  chatAPI.subscribe(\"statusChanged\", statusChangedHandlerCreator(dispatch));\r\n};\r\n\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n  chatAPI.unsubscribe(\"messagesReceived\", newMessageHandlerCreator(dispatch));\r\n  chatAPI.stop();\r\n};\r\n\r\nexport const sendMessage =\r\n  (message: string): ThunkType =>\r\n  async () => {\r\n    chatAPI.sendMessage(message);\r\n  };\r\n\r\nexport default chatReducer;\r\n","module.exports = __webpack_public_path__ + \"static/media/preloader.abffbc11.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__1XdlC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2OueL\"};","import axios from \"axios\";\r\nimport { UserType } from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n  headers: {\r\n    \"API-KEY\": \"001c36a3-ba71-40a3-a26a-dec8b0b0d69d\",\r\n  },\r\n});\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n  data: D;\r\n  messages: Array<string>;\r\n  resultCode: RC;\r\n};\r\n\r\nexport enum ResultCodesEnum {\r\n  Success = 0,\r\n  Error = 1,\r\n  Captcha = 10,\r\n}\r\n\r\nexport type GetItemsType = {\r\n  items: Array<UserType>;\r\n  totalCount: number;\r\n  error: string | null;\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect, ChangeEvent } from \"react\";\n\ntype PropsType = {\n  status: string;\n  updateStatus: (status: string) => void;\n};\n\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\n  let [editMode, setEditMode] = useState(false);\n  let [status, setStatus] = useState(props.status);\n\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n  };\n\n  const deactivateEditMode = () => {\n    setEditMode(false);\n    props.updateStatus(status);\n  };\n\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setStatus(e.currentTarget.value);\n  };\n\n  return (\n    <div>\n      {!editMode && (\n        <div>\n          <b>Status: </b>{\" \"}\n          <span onDoubleClick={activateEditMode}>\n            {props.status || \"-------\"}\n          </span>\n        </div>\n      )}\n      {editMode && (\n        <div>\n          <input\n            onChange={onStatusChange}\n            autoFocus={true}\n            onBlur={deactivateEditMode}\n            value={status}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProfileStatusWithHooks;\n","import React from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport {\r\n  createField,\r\n  GetStringKeys,\r\n  Input,\r\n  Textarea,\r\n} from \"../../common/FormsControls/FormsControls\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { ProfileType } from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n  profile: ProfileType;\r\n};\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>;\r\n\r\nconst ProfileDataForm: React.FC<\r\n  InjectedFormProps<ProfileType, PropsType> & PropsType\r\n> = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <button>save</button>\r\n      </div>\r\n      {error && <div className={classes.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <b>Full name</b>:{\" \"}\r\n        {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job</b>:{\" \"}\r\n        {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {\r\n          type: \"checkbox\",\r\n        })}\r\n      </div>\r\n\r\n      <div>\r\n        <b>My professional skills</b>:\r\n        {createField<ProfileTypeKeys>(\r\n          \"My professional skills\",\r\n          \"lookingForAJobDescription\",\r\n          [],\r\n          Textarea\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <b>About me</b>:\r\n        {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:{\" \"}\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <div key={key} className={classes.contact}>\r\n              {/* todo: create some solution for embedded objects */}\r\n              <b>\r\n                {key}: {createField(key, \"contacts.\" + key, [], Input)}\r\n              </b>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({\r\n  form: \"edit-profile\",\r\n})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, { ChangeEvent, useState } from \"react\";\nimport Preloader from \"../../common/preloader/Preloader\";\nimport classes from \"./ProfileInfo.module.css\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../asssets/images/man-avatar-profile-round-icon_24640-14046.jpg\";\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport { ContactsType, ProfileType } from \"../../../types/types\";\n\ntype PropsType = {\n  profile: ProfileType | null;\n  status: string;\n  updateStatus: (status: string) => void;\n  isOwner: boolean;\n  savePhoto: (file: File) => void;\n  saveProfile: (profile: ProfileType) => Promise<any>;\n};\n\nconst ProfileInfo: React.FC<PropsType> = ({\n  profile,\n  status,\n  updateStatus,\n  isOwner,\n  savePhoto,\n  saveProfile,\n}) => {\n  let [editMode, setEditMode] = useState(false);\n\n  if (!profile) {\n    return <Preloader />;\n  }\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length) {\n      savePhoto(e.target.files[0]);\n    }\n  };\n\n  const onSubmit = (formData: ProfileType) => {\n    // todo: remove then\n    saveProfile(formData).then(() => {\n      setEditMode(false);\n    });\n  };\n\n  return (\n    <div>\n      <div className={classes.descriptionBlock}>\n        <img\n          src={profile.photos.large || userPhoto}\n          className={classes.mainPhoto}\n        />\n        {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\n\n        {editMode ? (\n          <ProfileDataForm\n            initialValues={profile}\n            profile={profile}\n            onSubmit={onSubmit}\n          />\n        ) : (\n          <ProfileData\n            goToEditMode={() => {\n              setEditMode(true);\n            }}\n            profile={profile}\n            isOwner={isOwner}\n          />\n        )}\n\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n      </div>\n    </div>\n  );\n};\n\ntype ProfileDataPropsType = {\n  profile: ProfileType;\n  isOwner: boolean;\n  goToEditMode: () => void;\n};\nconst ProfileData: React.FC<ProfileDataPropsType> = ({\n  profile,\n  isOwner,\n  goToEditMode,\n}) => {\n  return (\n    <div>\n      {isOwner && (\n        <div>\n          <button onClick={goToEditMode}>edit</button>\n        </div>\n      )}\n      <div>\n        <b>Full name</b>: {profile.fullName}\n      </div>\n      <div>\n        <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\n      </div>\n      {profile.lookingForAJob && (\n        <div>\n          <b>My professional skills</b>: {profile.lookingForAJobDescription}\n        </div>\n      )}\n\n      <div>\n        <b>About me</b>: {profile.aboutMe}\n      </div>\n      <div>\n        <b>Contacts</b>:{\" \"}\n        {Object.keys(profile.contacts).map((key) => {\n          return (\n            <Contact\n              key={key}\n              contactTitle={key}\n              contactValue={profile.contacts[key as keyof ContactsType]}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\ntype ContactsPropsType = {\n  contactTitle: string;\n  contactValue: string;\n};\nconst Contact: React.FC<ContactsPropsType> = ({\n  contactTitle,\n  contactValue,\n}) => {\n  return (\n    <div className={classes.contact}>\n      <b>{contactTitle}</b>: {contactValue}\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","import { PhotosType, ProfileType } from \"./../types/types\";\r\nimport { instance, APIResponseType } from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n  photos: PhotosType;\r\n};\r\n\r\nexport const profileAPI = {\r\n  getProfile(userId: number) {\r\n    return instance\r\n      .get<ProfileType>(`profile/` + userId)\r\n      .then((res) => res.data);\r\n  },\r\n  getStatus(userId: number) {\r\n    return instance\r\n      .get<string>(\"profile/status/\" + userId)\r\n      .then((res) => res.data);\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance\r\n      .put<APIResponseType>(\"profile/status\", { status: status })\r\n      .then((res) => res.data);\r\n  },\r\n  savePhoto(photoFile: File) {\r\n    const formData = new FormData();\r\n    formData.append(\"image\", photoFile);\r\n    return instance\r\n      .put<APIResponseType<SavePhotoResponseDataType>>(\r\n        \"profile/photo\",\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n        }\r\n      )\r\n      .then((res) => res.data);\r\n  },\r\n  saveProfile(profile: ProfileType) {\r\n    return instance\r\n      .put<APIResponseType>(\"profile\", profile)\r\n      .then((res) => res.data);\r\n  },\r\n};\r\n","import { FormAction, stopSubmit } from \"redux-form\";\r\nimport { act } from \"react-dom/test-utils\";\r\nimport { profileAPI } from \"../api/profileApi\";\r\nimport { usersAPI } from \"../api/usersApi\";\r\nimport { PhotosType, PostType, ProfileType } from \"../types/types\";\r\nimport { InferActionsTypes, BaseThunkType } from \"./reduxStore\";\r\n\r\nlet initialState = {\r\n  posts: [\r\n    {\r\n      id: 1,\r\n      message: \"Hi, how are u?\",\r\n      likesCount: 15,\r\n    },\r\n    {\r\n      id: 2,\r\n      message: \"It is my first post\",\r\n      likesCount: 12,\r\n    },\r\n  ] as Array<PostType>,\r\n\r\n  profile: null as ProfileType | null,\r\n  status: \"\",\r\n  newPostText: \"\",\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;\r\n\r\nexport const actions = {\r\n  addPostActionCreator: (newPostText: string) => {\r\n    return { type: \"SN/PROFILE/ADD_POST\", newPostText } as const;\r\n  },\r\n  setUserProfile: (profile: ProfileType) => {\r\n    return { type: \"SN/PROFILE/SET_USER_PROFILE\", profile } as const;\r\n  },\r\n  setStatus: (status: string) => {\r\n    return { type: \"SN/PROFILE/SET_STATUS\", status } as const;\r\n  },\r\n  savePhotoSuccess: (photos: PhotosType) => {\r\n    return { type: \"SN/PROFILE/SAVE_PHOTO_SUCCESS\", photos } as const;\r\n  },\r\n\r\n  deletePost: (postId: number) => {\r\n    return { type: \"SN/PROFILE/DELETE_POST\", postId } as const;\r\n  },\r\n};\r\n\r\nconst profileReducer = (\r\n  state = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"SN/PROFILE/ADD_POST\": {\r\n      let newPost = {\r\n        id: 3,\r\n        message: action.newPostText,\r\n        likesCount: 3,\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n        newPostText: \"\",\r\n      };\r\n    }\r\n\r\n    case \"SN/PROFILE/SET_STATUS\": {\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      };\r\n    }\r\n    case \"SN/PROFILE/SET_USER_PROFILE\": {\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      };\r\n    }\r\n    case \"SN/PROFILE/SAVE_PHOTO_SUCCESS\": {\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos } as ProfileType,\r\n      };\r\n    }\r\n    case \"SN/PROFILE/DELETE_POST\": {\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((p) => p.id != action.postId),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const getUserProfile =\r\n  (userId: number): ThunkType =>\r\n  async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n  };\r\nexport const getStatus =\r\n  (userId: number): ThunkType =>\r\n  async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n  };\r\nexport const updateStatus =\r\n  (status: string): ThunkType =>\r\n  async (dispatch) => {\r\n    try {\r\n      let data = await profileAPI.updateStatus(status);\r\n      if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status));\r\n      }\r\n    } catch (error) {\r\n      debugger;\r\n    }\r\n  };\r\nexport const savePhoto =\r\n  (file: File): ThunkType =>\r\n  async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === 0) {\r\n      dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n  };\r\nexport const saveProfile =\r\n  (profile: ProfileType): ThunkType =>\r\n  async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    const data = await profileAPI.saveProfile(profile);\r\n\r\n    if (data.resultCode === 0) {\r\n      if (userId !== null) {\r\n        dispatch(getUserProfile(userId));\r\n      } else {\r\n        throw new Error(`User ID can't be null`);\r\n      }\r\n    } else {\r\n      dispatch(stopSubmit(\"edit-profile\", { _error: data.messages[0] }));\r\n      return Promise.reject(data.messages[0]);\r\n    }\r\n  };\r\n\r\nexport default profileReducer;\r\n","import React from \"react\";\nimport classes from \"./Post.module.css\";\n\nconst Post = (props) => {\n  return (\n    <div className={classes.item}>\n      <img src=\"https://miro.medium.com/max/1200/1*mk1-6aYaf_Bes1E3Imhc0A.jpeg\"></img>\n      <div>\n        <span>{props.message}</span>\n      </div>\n      <div>\n        <span>{props.likesCount} Like</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n","import React from \"react\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n  createField,\r\n  GetStringKeys,\r\n  Input,\r\n} from \"../../../common/FormsControls/FormsControls\";\r\nimport { required } from \"../../../../utils/validators/validators\";\r\n\r\ntype PropsType = {};\r\n\r\nexport type AddPostFormValuesType = {\r\n  newPostText: string;\r\n};\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>;\r\n\r\nconst AddPostForm: React.FC<\r\n  InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType\r\n> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        {createField<AddPostFormValuesTypeKeys>(\r\n          \"Your post\",\r\n          \"newPostText\",\r\n          [required],\r\n          Input\r\n        )}\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({\r\n  form: \"profile-add-post\",\r\n})(AddPostForm);\r\n","import React from \"react\";\nimport classes from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\nimport AddPostForm, { AddPostFormValuesType } from \"./AddPostForm/AddPostForm\";\nimport { PostType } from \"../../../types/types\";\n\nexport type MapPropsType = {\n  posts: Array<PostType>;\n};\nexport type DispatchPropsType = {\n  addPost: (newPostText: string) => void;\n};\n\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n  let postsElements = [...props.posts]\n    .reverse()\n    .map((p) => (\n      <Post key={p.id} message={p.message} likesCount={p.likesCount} />\n    ));\n\n  let onAddPost = (values: AddPostFormValuesType) => {\n    props.addPost(values.newPostText);\n  };\n\n  return (\n    <div className={classes.postsBlock}>\n      <h3>My posts</h3>\n      <AddPostForm onSubmit={onAddPost} />\n      <div className={classes.posts}>{postsElements}</div>\n    </div>\n  );\n};\n\nconst MyPostsMemorized = React.memo(MyPosts);\n\nexport default MyPostsMemorized;\n","import React from \"react\";\r\nimport { actions } from \"../../../redux/profileReducer\";\r\nimport MyPosts, { DispatchPropsType, MapPropsType } from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../../redux/reduxStore\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect<\r\n  MapPropsType,\r\n  DispatchPropsType,\r\n  {},\r\n  AppStateType\r\n>(mapStateToProps, {\r\n  addPost: actions.addPostActionCreator,\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport { ProfileType } from \"../../types/types\";\n\ntype PropsType = {\n  profile: ProfileType | null;\n  status: string;\n  updateStatus: (status: string) => void;\n  isOwner: boolean;\n  savePhoto: (file: File) => void;\n  saveProfile: (profile: ProfileType) => Promise<any>;\n};\n\nconst Profile: React.FC<PropsType> = (props) => {\n  return (\n    <div>\n      <ProfileInfo\n        savePhoto={props.savePhoto}\n        isOwner={props.isOwner}\n        profile={props.profile}\n        status={props.status}\n        saveProfile={props.saveProfile}\n        updateStatus={props.updateStatus}\n      />\n      <MyPostsContainer />\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport {\n  getStatus,\n  getUserProfile,\n  savePhoto,\n  saveProfile,\n  updateStatus,\n} from \"../../redux/profileReducer\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { AppStateType } from \"../../redux/reduxStore\";\nimport { ProfileType } from \"../../types/types\";\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\ntype DispatchPropsType = {\n  getUserProfile: (userId: number) => void;\n  getStatus: (userId: number) => void;\n  updateStatus: (status: string) => void;\n  savePhoto: (file: File) => void;\n  saveProfile: (profile: ProfileType) => Promise<any>;\n};\n\ntype PathParamsType = {\n  userId: string;\n};\n\ntype PropsType = MapPropsType &\n  DispatchPropsType &\n  RouteComponentProps<PathParamsType>;\n\nclass ProfileContainer extends React.Component<PropsType> {\n  constructor(props: PropsType) {\n    super(props);\n  }\n\n  refreshProfile() {\n    let userId: number | null = +this.props.match.params.userId;\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n      if (!userId) {\n        // todo: may be replace push with Redirect??\n        this.props.history.push(\"/login\");\n      }\n    }\n\n    if (!userId) {\n      console.error(\n        \"ID should exists in URI params or in state ('authorizedUserId')\"\n      );\n    } else {\n      this.props.getUserProfile(userId);\n      this.props.getStatus(userId);\n    }\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n    if (this.props.match.params.userId != prevProps.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    return (\n      <Profile\n        {...this.props}\n        isOwner={!this.props.match.params.userId}\n        profile={this.props.profile}\n        status={this.props.status}\n        updateStatus={this.props.updateStatus}\n        savePhoto={this.props.savePhoto}\n      />\n    );\n  }\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n  return {\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n  };\n};\n\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, {\n    getUserProfile,\n    getStatus,\n    updateStatus,\n    savePhoto,\n    saveProfile,\n  }),\n  withRouter\n)(ProfileContainer);\n","import React from 'react'\nimport classes from './News.module.css'\n\nconst News: React.FC = () => {\n    return (\n    <div>\n        <p>\n            News\n        </p>\n    </div>\n    )\n}\n\nexport default News","import React from \"react\";\nimport classes from \"./Music.module.css\";\n\nconst Music: React.FC = () => {\n  return (\n    <div>\n      <p>Music</p>\n    </div>\n  );\n};\n\nexport default Music;\n","import React from 'react'\nimport classes from './Settings.module.css'\n\nconst Settings: React.FC = () => {\n    return (\n        <div>\n        <p>\n            Settings\n        </p>\n    </div>\n    )\n}\n\nexport default Settings","import { instance, APIResponseType, ResultCodesEnum } from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n  id: number;\r\n  email: string;\r\n  login: string;\r\n};\r\n\r\ntype LoginResponseDataType = {\r\n  userId: number;\r\n};\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    return instance\r\n      .get<APIResponseType<MeResponseDataType>>(`auth/me`)\r\n      .then((res) => res.data);\r\n  },\r\n  login(\r\n    email: string,\r\n    password: string,\r\n    rememberMe = false,\r\n    captcha: null | string = null\r\n  ) {\r\n    return instance\r\n      .post<APIResponseType<LoginResponseDataType, ResultCodesEnum>>(\r\n        \"auth/login\",\r\n        {\r\n          email,\r\n          password,\r\n          rememberMe,\r\n          captcha,\r\n        }\r\n      )\r\n      .then((res) => res.data);\r\n  },\r\n  logout() {\r\n    return instance.delete(\"auth/login\");\r\n  },\r\n};\r\n","import { instance } from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n  url: string;\r\n};\r\n\r\nexport const securityAPI = {\r\n  getCaptchaUrl() {\r\n    return instance\r\n      .get<GetCaptchaUrlResponseType>(\"security/get-captcha-url\")\r\n      .then((res) => res.data);\r\n  },\r\n};\r\n","import { Action } from \"redux\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./reduxStore\";\r\nimport { ResultCodesEnum } from \"./../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { authAPI } from \"../api/authApi\";\r\nimport { securityAPI } from \"../api/securityApi\";\r\n\r\nexport type InitialStateType = {\r\n  userId: number | null;\r\n  email: string | null;\r\n  login: string | null;\r\n  isAuth: boolean | false;\r\n  captchaUrl: string | null;\r\n};\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | ReturnType<typeof stopSubmit>>;\r\n\r\nlet initialState: InitialStateType = {\r\n  userId: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false,\r\n  captchaUrl: null,\r\n};\r\n\r\nexport const actions = {\r\n  setAuthUserData: (\r\n    userId: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n  ) =>\r\n    ({\r\n      type: \"SN/AUTH/SET_USER_DATA\",\r\n      payload: { userId, email, login, isAuth },\r\n    } as const),\r\n  getCaptchaUrlSuccess: (captchaUrl: string) =>\r\n    ({\r\n      type: \"SN/AUTH/GET_CAPTCHA_URL_SUCCESS\",\r\n      payload: { captchaUrl },\r\n    } as const),\r\n};\r\n\r\nconst authReducer = (\r\n  state = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"SN/AUTH/SET_USER_DATA\":\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    case \"SN/AUTH/GET_CAPTCHA_URL_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n  // делаем функцию асинхронной\r\n  let meData = await authAPI.me(); // await заставляет ждать до тех пор, пока промис справа от await не выполнится\r\n  if (meData.resultCode === ResultCodesEnum.Success) {\r\n    let { id, login, email } = meData.data;\r\n    dispatch(actions.setAuthUserData(id, email, login, true));\r\n  }\r\n};\r\n\r\nexport const login =\r\n  (\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: null | string\r\n  ): ThunkType =>\r\n  async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n      // success, get auth data\r\n      dispatch(getAuthUserData());\r\n    } else {\r\n      if (data.resultCode === ResultCodesEnum.Captcha) {\r\n        dispatch(getCaptchaUrl());\r\n      }\r\n\r\n      let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n      dispatch(stopSubmit(\"login\", { _error: message }));\r\n    }\r\n  };\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n  try {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n  } catch (error) {\r\n    debugger;\r\n  }\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n  let response = await authAPI.logout();\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false));\r\n  }\r\n};\r\nexport default authReducer;\r\n","import React from \"react\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n  createField,\r\n  GetStringKeys,\r\n  Input,\r\n} from \"../common/FormsControls/FormsControls\";\r\nimport { required } from \"../../utils/validators/validators\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login } from \"../../redux/authReducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\";\r\nimport { AppStateType } from \"../../redux/reduxStore\";\r\n\r\ntype LoginFormOwnProps = {\r\n  captchaUrl: string | null;\r\n};\r\n\r\nconst LoginForm: React.FC<\r\n  InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps\r\n> = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {createField<LoginFormValuesTypeKeys>(\r\n        \"Email\",\r\n        \"email\",\r\n        [required],\r\n        Input\r\n      )}\r\n      {createField<LoginFormValuesTypeKeys>(\r\n        \"Password\",\r\n        \"password\",\r\n        [required],\r\n        Input,\r\n        { type: \"password\" }\r\n      )}\r\n      {createField<LoginFormValuesTypeKeys>(\r\n        undefined,\r\n        \"rememberMe\",\r\n        [],\r\n        Input,\r\n        { type: \"checkbox\" },\r\n        \"remember me\"\r\n      )}\r\n\r\n      {captchaUrl && <img src={captchaUrl} />}\r\n      {captchaUrl &&\r\n        createField<LoginFormValuesTypeKeys>(\r\n          \"Symbols from image\",\r\n          \"captcha\",\r\n          [required],\r\n          Input,\r\n          {}\r\n        )}\r\n\r\n      {error && <div className={style.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n  form: \"login\",\r\n})(LoginForm);\r\n\r\nexport type LoginFormValuesType = {\r\n  captcha: string;\r\n  rememberMe: boolean;\r\n  password: string;\r\n  email: string;\r\n};\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n\r\nexport const LoginPage: React.FC = () => {\r\n  const captchaUrl = useSelector(\r\n    (state: AppStateType) => state.auth.captchaUrl\r\n  );\r\n  const isAuth = useSelector((state: AppStateType) => state.auth.isAuth);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = (formData: LoginFormValuesType) => {\r\n    dispatch(\r\n      login(\r\n        formData.email,\r\n        formData.password,\r\n        formData.rememberMe,\r\n        formData.captcha\r\n      )\r\n    );\r\n  };\r\n\r\n  if (isAuth) {\r\n    return <Redirect to={\"/profile\"} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n    </div>\r\n  );\r\n};\r\n","import { InferActionsTypes } from \"./reduxStore\";\r\n\r\nimport { getAuthUserData } from \"./authReducer\";\r\n\r\nlet initialState = {\r\n  initialized: false,\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type ActionsType = InferActionsTypes<typeof actions>;\r\n\r\nconst appReducer = (state = initialState, action: any): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"SN/APP/INITIALIZED_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  initializedSuccess: () =>\r\n    ({\r\n      type: \"SN/APP/INITIALIZED_SUCCESS\",\r\n    } as const),\r\n};\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n  let promise = dispatch(getAuthUserData());\r\n  promise.then(() => {\r\n    dispatch(actions.initializedSuccess());\r\n  });\r\n};\r\n\r\nexport default appReducer;\r\n","import {\r\n  applyMiddleware,\r\n  combineReducers,\r\n  createStore,\r\n  compose,\r\n  Action,\r\n} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport appReducer from \"./appReducer\";\r\nimport chatReducer from \"./chatReducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  messagesPage: dialogsReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  app: appReducer,\r\n  form: formReducer,\r\n  chat: chatReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\n// type PropertiesTypes<T> = T extends {[key: string] : infer U} ? U : never\r\nexport type InferActionsTypes<T> = T extends {\r\n  [key: string]: (...args: any[]) => infer U;\r\n}\r\n  ? U\r\n  : never;\r\nexport type BaseThunkType<\r\n  A extends Action = Action,\r\n  R = Promise<void>\r\n> = ThunkAction<R, AppStateType, unknown, A>;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  rootReducer,\r\n  /* preloadedState, */ composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","import React from \"react\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  return (props: WCP) => {\r\n    return (\r\n      <React.Suspense fallback={<div>loading...</div>}>\r\n        <WrappedComponent {...props} />\r\n      </React.Suspense>\r\n    );\r\n  };\r\n}\r\n","import { AppStateType } from \"./reduxStore\";\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n  return state.auth.isAuth;\r\n};\r\n\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n  return state.auth.login;\r\n};\r\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"antd/dist/antd.css\";\nimport { Layout, Menu, Avatar, Row, Col, Button } from \"antd\";\nimport { UserOutlined } from \"@ant-design/icons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectCurrentUserLogin,\n  selectIsAuth,\n} from \"../../redux/authSelectors\";\nimport { logout } from \"../../redux/authReducer\";\n\nexport type MapPropsType = {};\n\nexport const Header: React.FC<MapPropsType> = () => {\n  const isAuth = useSelector(selectIsAuth);\n  const login = useSelector(selectCurrentUserLogin);\n\n  const dispatch = useDispatch();\n\n  const logoutCallback = () => {\n    dispatch(logout());\n  };\n\n  const { Header } = Layout;\n\n  return (\n    <Header className=\"header\">\n      <Row>\n        <Col span={18}>\n          <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"2\"]}>\n            <Menu.Item key=\"1\">\n              <Link to=\"/users\">Users</Link>\n            </Menu.Item>\n          </Menu>\n        </Col>\n\n        {isAuth ? (\n          <>\n            {\" \"}\n            <Col span={1}>\n              <Avatar\n                alt={login || \"\"}\n                style={{ backgroundColor: \"#87d068\" }}\n                icon={<UserOutlined />}\n              />\n            </Col>\n            <Col span={5}>\n              <Button onClick={logoutCallback}>Log out</Button>\n            </Col>\n          </>\n        ) : (\n          <Col span={6}>\n            <Button>\n              <Link to={\"/login\"}>Login</Link>\n            </Button>\n          </Col>\n        )}\n      </Row>\n    </Header>\n  );\n};\n","import React from \"react\";\n//import \"./App.css\";\nimport \"antd/dist/antd.css\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport {\n  HashRouter,\n  Link,\n  Redirect,\n  Route,\n  Switch,\n  withRouter,\n} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport { LoginPage } from \"./components/Login/LoginPage\";\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { initializeApp } from \"./redux/appReducer\";\nimport { compose } from \"redux\";\nimport Preloader from \"./components/common/preloader/Preloader\";\nimport store, { AppStateType } from \"./redux/reduxStore\";\nimport { Provider } from \"react-redux\";\nimport { Suspense } from \"react\";\nimport { withSuspense } from \"./hoc/withSuspense\";\nimport { Layout, Menu, Breadcrumb } from \"antd\";\nimport {\n  UserOutlined,\n  LaptopOutlined,\n  NotificationOutlined,\n} from \"@ant-design/icons\";\nimport { Header } from \"./components/Header/Header\";\n\nconst DialogsContainer = React.lazy(\n  () => import(\"./components/Dialogs/DialogsContainer\")\n);\nconst UsersPage = React.lazy(() => import(\"./components/Users/UsersContainer\"));\nconst ChatPage = React.lazy(() => import(\"./pages/Chat/ChatPage\"));\n\ntype MapsPropsType = ReturnType<typeof mapStateToProps>;\ntype DispatchPropsType = {\n  initializeApp: () => void;\n};\n\nconst SuspendedDialogs = withSuspense(DialogsContainer);\nconst SuspendedProfile = withSuspense(ProfileContainer);\nconst SuspendedChatPage = withSuspense(ChatPage);\n\nclass App extends Component<MapsPropsType & DispatchPropsType> {\n  catchAllUnhandledError = (e: PromiseRejectionEvent) => {\n    alert(\"some error\");\n    console.error(e);\n  };\n\n  componentDidMount() {\n    this.props.initializeApp();\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledError);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"unhandledrejection\",\n      this.catchAllUnhandledError\n    );\n  }\n\n  render() {\n    if (!this.props.initialized) {\n      return <Preloader />;\n    }\n    const { SubMenu } = Menu;\n    const { Content, Footer, Sider } = Layout;\n\n    return (\n      // <div className=\"app-wrapper\">\n      //   <HeaderContainer />\n      //   <Navbar />\n      //   <Switch>\n      //     <div className=\"app-wrapper-content\">\n      //       <Route exact path=\"/\" render={() => <Redirect to={\"/profile\"} />} />\n\n      //       <Route\n      //         path=\"/profile/:userId?\"\n      //         render={() => <SuspendedProfile />}\n      //       />\n      //       <Route\n      //         exact\n      //         path=\"/dialogs\"\n      //         render={() => <SuspendedDialogs/>}\n      //       />\n      //       <Route\n      //         path=\"/users\"\n      //         render={() => {\n      //           return (\n      //             <Suspense\n      //               fallback={\n      //                 <div>\n      //                   <Preloader />\n      //                 </div>\n      //               }\n      //             >\n      //               <UsersPage\n      //                 pageTitle={\"Guys who want to learn React too\"}\n      //               />\n      //             </Suspense>\n      //           );\n      //         }}\n      //       />\n      //       <Route path=\"/news\" render={() => <News />} />\n      //       <Route path=\"/music\" render={() => <Music />} />\n      //       <Route path=\"/settings\" render={() => <Settings />} />\n      //       <Route path=\"/login\" render={() => <LoginPage />} />\n      //     </div>\n      //   </Switch>\n      // </div>\n      <Layout>\n        <Header />\n        <Content style={{ padding: \"0 50px\" }}>\n          <Breadcrumb style={{ margin: \"16px 0\" }}>\n            <Breadcrumb.Item>App</Breadcrumb.Item>\n          </Breadcrumb>\n          <Layout\n            className=\"site-layout-background\"\n            style={{ padding: \"24px 0\" }}\n          >\n            <Sider className=\"site-layout-background\" width={200}>\n              <Menu\n                mode=\"inline\"\n                defaultOpenKeys={[\"sub1\"]}\n                style={{ height: \"100%\" }}\n              >\n                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My Profile\">\n                  <Menu.Item key=\"1\">\n                    <Link to=\"/profile\">Profile</Link>\n                  </Menu.Item>\n                  <Menu.Item key=\"2\">\n                    <Link to=\"/dialogs\">Dialogs</Link>\n                  </Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"Users\">\n                  <Menu.Item key=\"3\">\n                    <Link to=\"/users\">Users</Link>\n                  </Menu.Item>\n                  <Menu.Item key=\"4\">\n                    <Link to=\"/chat\">Chat</Link>\n                  </Menu.Item>\n                </SubMenu>\n                <SubMenu\n                  key=\"sub3\"\n                  icon={<NotificationOutlined />}\n                  title=\"Others\"\n                >\n                  <Menu.Item key=\"5\">\n                    <Link to=\"/news\">News</Link>\n                  </Menu.Item>\n                  <Menu.Item key=\"6\">\n                    <Link to=\"/music\">Music</Link>\n                  </Menu.Item>\n                  <Menu.Item key=\"7\">\n                    <Link to=\"/settings\">Settings</Link>\n                  </Menu.Item>\n                </SubMenu>\n              </Menu>\n            </Sider>\n            <Content style={{ padding: \"0 24px\", minHeight: 280 }}>\n              <Switch>\n                <div className=\"app-wrapper-content\">\n                  <Route\n                    exact\n                    path=\"/\"\n                    render={() => <Redirect to={\"/profile\"} />}\n                  />\n                  <Route\n                    path=\"/profile/:userId?\"\n                    render={() => <SuspendedProfile />}\n                  />\n                  <Route\n                    exact\n                    path=\"/dialogs\"\n                    render={() => <SuspendedDialogs />}\n                  />\n                  <Route\n                    path=\"/users\"\n                    render={() => {\n                      return (\n                        <Suspense\n                          fallback={\n                            <div>\n                              <Preloader />\n                            </div>\n                          }\n                        >\n                          <UsersPage\n                            pageTitle={\"Guys who want to learn React too\"}\n                          />\n                        </Suspense>\n                      );\n                    }}\n                  />\n                  <Route path=\"/news\" render={() => <News />} />\n                  <Route path=\"/music\" render={() => <Music />} />\n                  <Route path=\"/settings\" render={() => <Settings />} />\n                  <Route path=\"/chat\" render={() => <SuspendedChatPage />} />\n                  <Route path=\"/login\" render={() => <LoginPage />} />\n                </div>\n              </Switch>\n            </Content>\n          </Layout>\n        </Content>\n        <Footer style={{ textAlign: \"center\" }}>\n          Social Network ©2021 Created by Sergey Hrabrov\n        </Footer>\n      </Layout>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  initialized: state.app.initialized,\n});\n\nlet AppContainer = compose<React.ComponentType>(\n  withRouter,\n  connect(mapStateToProps, { initializeApp })\n)(App);\n\nconst MainApp: React.FC = () => {\n  return (\n    <HashRouter hashType={\"slash\"}>\n      <Provider store={store}>\n        <AppContainer />\n      </Provider>\n    </HashRouter>\n  );\n};\n\nexport default MainApp;\n","import * as serviceWorker from \"./serviceWorker\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport MainApp from \"./App\";\n\nReactDOM.render(<MainApp />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2QDxN\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2Vt2r\",\"contact\":\"ProfileInfo_contact__15Toe\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import React from \"react\";\nimport preloader from \"../../../asssets/images/preloader.svg\";\nimport classes from \"../preloader/Preloader.module.css\";\n\nlet Preloader: React.FC = () => {\n  return (\n    <div className={classes.preloader}>\n      <img src={preloader} />\n    </div>\n  );\n};\n\nexport default Preloader;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1Bdil\",\"error\":\"FormsControls_error__3rfaG\",\"formSummaryError\":\"FormsControls_formSummaryError__Ta6ne\"};"],"sourceRoot":""}